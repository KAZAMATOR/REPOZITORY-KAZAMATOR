//1.1)ИНКАПСУЛЯЦИЯ - ограничение доступа к данным и возможности их изменения.
//
//1.2)НАСЛЕДОВАНИЕ - механизм позволяющий описать свойства нового класса на основе уже существующего. свойства и
//функциональность "родительского" класса заимствуются новым.
//
//1.3)ПОЛИМОРФИЗМ -механизм позволяющий работать с разными типами как будто это один и тот же тип.
//
//1.4)АБСТРАКЦИЯ - механизм позволяющий выделить значимые и отбросить незначимые характеристики.
//
//
//
//
//2.1)friend - применяется чтобы сделать какой то обьект дружественным к классу. такой обьект
//получит доступ к приватным полям.
//
//2.2)поля public и private - обозначение для закрытых и открытых полей класса.



#include <iostream>
#include "cmath"


class Point
{
protected:
    double _x;
    double _y;
    double _z;

public:
    Point(double x, double y, double z): _x(x), _y(y), _z(z) {
    }

    double x() const {
        return _x;
    }

    double y() const {
        return _y;
    }

    double z() const {
        return _z;
    }
};
//Реализуйте класс, задающий сферу. Прототип класса:

class Sphere
{
public:
    // Конструктор сферы с центром в точке center и радиусом r
    Sphere(const Point &center, double r) : center(center), r(r) {}

    // Проверка, попадает ли заданная точка p в данную сферу.
    // (Расстояния сравнивать с точностью 1e-6.)
    bool covers(const Point& p) const {
        if(std::sqrt((p.x()-center.x())*(p.x()-center.x()) + (p.y()-center.y())*(p.y()-center.y()) + (p.z()-center.z())*(p.z()-center.z()))-r<0.000001){
            return true;
        }
        return false;
    }
private:
    const Point center;
    double r;

};


//Для тестирования можете использовать следующий базовый пример:
int main() {

    Point center(10.0, 10.0, 10.0);
    Sphere s(center, 0.5);

    // Создаём пару тестовых точек
    Point p1(10.1, 10.1, 10.1);
    Point p2(2, 2, 2);

    // Ожидаем, что первая точка внутри сферы
    std::cout << std::boolalpha << s.covers(p1) << std::endl;
    // Ожидаем, что вторая точка не попала внутрь сферы
    std::cout << std::boolalpha << s.covers(p2) << std::endl;
}
