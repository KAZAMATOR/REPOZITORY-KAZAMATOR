//1)итератор для люблго контейнера выполняет функции указателя для обычного массива
//для итераторов существуют методы begin() и end() или константные cbegin() и cend()
//begin возвращает итератор на первый элемент
//end возвращает итератор на ячейку идущую после последнего элемента
//(это сделанно для удобного использования циклов)
//
//2)set - древовидная структура представляющая собой множество. при добавлении элементов
//в set они сортируются по возрастанию. если добавляются 2 одинаковых элемента set хранит
//только 1 из них
//  map - древовидная структура похожая на set но каждый элемент состоит из 2 ячеек (ключ и значение)
//по сути map представляет собой *словарь*. так же как и set при добавлении элемента map сортируется по возрастанию
//чтобы обратиться к элементу map через итератор необходимо ииспользовать ->first если мы обращаемся к ключу
//или ->second если мы обращаемся к значению
//
//в целом древовидная структура представляет из себя множество связанных узлов представляющих собой *дерево*
//где у каждого (кроме корневого элемента) есть предок и (если элемент не является последним в ветке) потомкии
//отличительной чертой этих древовидных структур является скорость поиск элементов (log(N)).


#include <iostream>
#include <map>

std::ostream& operator<<(std::ostream& os,std::map<int,int>& map){
    for(auto& item : map){
        os << item.first << " --> " << item.second << std::endl;
    }
    return os;
}

int main(){
    unsigned N; //вводим требуемое количество чисел
    std::cin >> N;
    std::map<int,int> map;
    int element;
    for(auto i = 0u;i<N;i++){
        std::cin >> element;
        if(map[element] != 0){
            map[element]++;
        }
        else{
            map[element] = 1;
        }
    }
    std::cout << map;
    return 0;
}


//если количество чисел не дано
//int main(){
//    std::map<int,int> map;
//    int element;
//    while(std::cin >> element){
//        if(map[element] != 0){
//            map[element]++;
//        }
//        else{
//            map[element] = 1;
//        }
//    }
//    std::cout << map;
//}
